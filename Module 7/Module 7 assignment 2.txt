Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS C:\Development\MongoDB\Module 7> mongoimport .\boxoffice-extended.json -d boxOffice -c exMovieStarts --jsonArray --drop
2025-01-22T12:57:46.354+0530    connected to: mongodb://localhost/
2025-01-22T12:57:46.356+0530    dropping: boxOffice.exMovieStarts
2025-01-22T12:57:46.384+0530    3 document(s) imported successfully. 0 document(s) failed to import.
PS C:\Development\MongoDB\Module 7>



Please enter a MongoDB connection string (Default: mongodb://localhost/):

Current Mongosh Log ID: 67909e6c70c422d6a9daca56
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.1.1
Using MongoDB:          7.0.4
Using Mongosh:          2.1.1
mongosh 2.3.8 is available for download: https://www.mongodb.com/try/download/shell

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2025-01-21T12:38:39.330+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> show dbs
admin            40.00 KiB
blog            112.00 KiB
boxOffice        80.00 KiB
carData          80.00 KiB
cityData         80.00 KiB
companyData      72.00 KiB
config          108.00 KiB
contactData     144.00 KiB
finnancialData   40.00 KiB
flights         116.00 KiB
hospital         88.00 KiB
local            72.00 KiB
movieData       192.00 KiB
patients         72.00 KiB
shop            128.00 KiB
support          88.00 KiB
test             12.00 KiB
user             72.00 KiB
test> use boxOffice
switched to db boxOffice
boxOffice> show collections
exMovieStarts
movieStarts
boxOffice> db.exMovieStarts.find()
[
  {
    _id: ObjectId('67909df22a3005f7c5cc672e'),
    title: 'Teach me if you can',
    meta: { rating: 8, aired: 2014, runtime: 90 },
    visitors: 590378,
    expectedVisitors: 500000,
    genre: [ 'action', 'thriller' ],
    ratings: [ 8, 8 ]
  },
  {
    _id: ObjectId('67909df22a3005f7c5cc672f'),
    title: 'The Last Student Returns',
    meta: { rating: 9.5, aired: 2018, runtime: 100 },
    visitors: 1300000,
    expectedVisitors: 1550000,
    genre: [ 'thriller', 'drama', 'action' ],
    ratings: [ 10, 9 ]
  },
  {
    _id: ObjectId('67909df22a3005f7c5cc6730'),
    title: 'Supercharged Teaching',
    meta: { rating: 9.3, aired: 2016, runtime: 60 },
    visitors: 370000,
    expectedVisitors: 1000000,
    genre: [ 'thriller', 'action' ],
    ratings: [ 10, 9, 9 ]
  }
]
boxOffice> db.exMovieStarts.find({genre: {$size: 2}})
[
  {
    _id: ObjectId('67909df22a3005f7c5cc672e'),
    title: 'Teach me if you can',
    meta: { rating: 8, aired: 2014, runtime: 90 },
    visitors: 590378,
    expectedVisitors: 500000,
    genre: [ 'action', 'thriller' ],
    ratings: [ 8, 8 ]
  },
  {
    _id: ObjectId('67909df22a3005f7c5cc6730'),
    title: 'Supercharged Teaching',
    meta: { rating: 9.3, aired: 2016, runtime: 60 },
    visitors: 370000,
    expectedVisitors: 1000000,
    genre: [ 'thriller', 'action' ],
    ratings: [ 10, 9, 9 ]
  }
]
boxOffice> db.exMovieStarts.find({"meta.aired": 2018})
[
  {
    _id: ObjectId('67909df22a3005f7c5cc672f'),
    title: 'The Last Student Returns',
    meta: { rating: 9.5, aired: 2018, runtime: 100 },
    visitors: 1300000,
    expectedVisitors: 1550000,
    genre: [ 'thriller', 'drama', 'action' ],
    ratings: [ 10, 9 ]
  }
]
boxOffice> db.exMovieStarts.find()
[
  {
    _id: ObjectId('67909df22a3005f7c5cc672e'),
    title: 'Teach me if you can',
    meta: { rating: 8, aired: 2014, runtime: 90 },
    visitors: 590378,
    expectedVisitors: 500000,
    genre: [ 'action', 'thriller' ],
    ratings: [ 8, 8 ]
  },
  {
    _id: ObjectId('67909df22a3005f7c5cc672f'),
    title: 'The Last Student Returns',
    meta: { rating: 9.5, aired: 2018, runtime: 100 },
    visitors: 1300000,
    expectedVisitors: 1550000,
    genre: [ 'thriller', 'drama', 'action' ],
    ratings: [ 10, 9 ]
  },
  {
    _id: ObjectId('67909df22a3005f7c5cc6730'),
    title: 'Supercharged Teaching',
    meta: { rating: 9.3, aired: 2016, runtime: 60 },
    visitors: 370000,
    expectedVisitors: 1000000,
    genre: [ 'thriller', 'action' ],
    ratings: [ 10, 9, 9 ]
  }
]
boxOffice> db.exMovieStarts.find({ratings:  {$elemMatch: {$gt: 8, $lt: 10}}})
[
  {
    _id: ObjectId('67909df22a3005f7c5cc672f'),
    title: 'The Last Student Returns',
    meta: { rating: 9.5, aired: 2018, runtime: 100 },
    visitors: 1300000,
    expectedVisitors: 1550000,
    genre: [ 'thriller', 'drama', 'action' ],
    ratings: [ 10, 9 ]
  },
  {
    _id: ObjectId('67909df22a3005f7c5cc6730'),
    title: 'Supercharged Teaching',
    meta: { rating: 9.3, aired: 2016, runtime: 60 },
    visitors: 370000,
    expectedVisitors: 1000000,
    genre: [ 'thriller', 'action' ],
    ratings: [ 10, 9, 9 ]
  }
]
boxOffice> db.exMovieStarts.find({ratings:  {$elemMatch: {$and: [{$gt: 8}, {$lt: 10}]}}})
MongoServerError: unknown top level operator: $gt. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.
boxOffice> db.exMovieStarts.find({ratings:  {$elemMatch: {$gt: 8, $lt: 10}}})
[
  {
    _id: ObjectId('67909df22a3005f7c5cc672f'),
    title: 'The Last Student Returns',
    meta: { rating: 9.5, aired: 2018, runtime: 100 },
    visitors: 1300000,
    expectedVisitors: 1550000,
    genre: [ 'thriller', 'drama', 'action' ],
    ratings: [ 10, 9 ]
  },
  {
    _id: ObjectId('67909df22a3005f7c5cc6730'),
    title: 'Supercharged Teaching',
    meta: { rating: 9.3, aired: 2016, runtime: 60 },
    visitors: 370000,
    expectedVisitors: 1000000,
    genre: [ 'thriller', 'action' ],
    ratings: [ 10, 9, 9 ]
  }
]


