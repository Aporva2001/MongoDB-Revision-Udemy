Please enter a MongoDB connection string (Default: mongodb://localhost/):

Current Mongosh Log ID: 67934a9dc2aaea9522094a2f
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.1.1
Using MongoDB:          7.0.4
Using Mongosh:          2.1.1
mongosh 2.3.8 is available for download: https://www.mongodb.com/try/download/shell

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2025-01-21T12:38:39.330+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> show dbs
SportData        72.00 KiB
admin            40.00 KiB
blog            112.00 KiB
boxOffice        80.00 KiB
carData          80.00 KiB
cityData         80.00 KiB
companyData      72.00 KiB
config          108.00 KiB
contactData     616.00 KiB
credit            7.91 MiB
finnancialData   40.00 KiB
flights         116.00 KiB
hospital         88.00 KiB
local            72.00 KiB
movieData       192.00 KiB
patients         72.00 KiB
shop            128.00 KiB
support          88.00 KiB
test             12.00 KiB
test> use credit
switched to db credit
credit> show collections
ratings
credit> db.ratings.find({}).count()
164977
credit> db.ratings.findOne()
{
  _id: ObjectId('67934897bae1f9eeb80dbbc3'),
  person_id: 1,
  score: 4.195736256055471,
  age: 65
}
credit> db.ratings.createIndex({age: 1})
age_1
credit> db.ratings.explain("executionStats").find({age: {$gt: 80}})
{
  explainVersion: '2',
  queryPlanner: {
    namespace: 'credit.ratings',
    indexFilterSet: false,
    parsedQuery: { age: { '$gt': 80 } },
    queryHash: 'B0DFDEAC',
    planCacheKey: 'F5E23975',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      queryPlan: {
        stage: 'FETCH',
        planNodeId: 2,
        inputStage: {
          stage: 'IXSCAN',
          planNodeId: 1,
          keyPattern: { age: 1 },
          indexName: 'age_1',
          isMultiKey: false,
          multiKeyPaths: { age: [] },
          isUnique: false,
          isSparse: false,
          isPartial: false,
          indexVersion: 2,
          direction: 'forward',
          indexBounds: { age: [ '(80, inf.0]' ] }
        }
      },
      slotBasedPlan: {
        slots: '$$RESULT=s11 env: { s6 = KS(33FFFFFFFFFFFFFFFFFE04), s1 = TimeZoneDatabase(Antarctica/South_Pole...Asia/Sakhalin) (timeZoneDB), s5 = KS(2BA0FE04), s2 = Nothing (SEARCH_META), s3 = 1737706329095 (NOW), s10 = {"age" : 1} }',
        stages: '[2] nlj inner [] [s4, s7, s8, s9, s10] \n' +
          '    left \n' +
          '        [1] cfilter {(exists(s5) && exists(s6))} \n' +
          '        [1] ixseek s5 s6 s9 s4 s7 s8 [] @"710fcb31-c9fd-406d-bb88-5b667de7a59a" @"age_1" true \n' +
          '    right \n' +
          '        [2] limit 1 \n' +
          '        [2] seek s4 s11 s12 s7 s8 s9 s10 [] @"710fcb31-c9fd-406d-bb88-5b667de7a59a" true false \n'
      }
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 16442,
    executionTimeMillis: 44,
    totalKeysExamined: 16442,
    totalDocsExamined: 16442,
    executionStages: {
      stage: 'nlj',
      planNodeId: 2,
      nReturned: 16442,
      executionTimeMillisEstimate: 44,
      opens: 1,
      closes: 1,
      saveState: 17,
      restoreState: 17,
      isEOF: 1,
      totalDocsExamined: 16442,
      totalKeysExamined: 16442,
      collectionScans: 0,
      collectionSeeks: 16442,
      indexScans: 0,
      indexSeeks: 1,
      indexesUsed: [ 'age_1' ],
      innerOpens: 16442,
      innerCloses: 1,
      outerProjects: [],
      outerCorrelated: [ Long('4'), Long('7'), Long('8'), Long('9'), Long('10') ],
      outerStage: {
        stage: 'cfilter',
        planNodeId: 1,
        nReturned: 16442,
        executionTimeMillisEstimate: 29,
        opens: 1,
        closes: 1,
        saveState: 17,
        restoreState: 17,
        isEOF: 1,
        numTested: 1,
        filter: '(exists(s5) && exists(s6)) ',
        inputStage: {
          stage: 'ixseek',
          planNodeId: 1,
          nReturned: 16442,
          executionTimeMillisEstimate: 29,
          opens: 1,
          closes: 1,
          saveState: 17,
          restoreState: 17,
          isEOF: 1,
          indexName: 'age_1',
          keysExamined: 16442,
          seeks: 1,
          numReads: 16443,
          indexKeySlot: 9,
          recordIdSlot: 4,
          snapshotIdSlot: 7,
          indexIdentSlot: 8,
          outputSlots: [],
          indexKeysToInclude: '00000000000000000000000000000000',
          seekKeyLow: 's5 ',
          seekKeyHigh: 's6 '
        }
      },
      innerStage: {
        stage: 'limit',
        planNodeId: 2,
        nReturned: 16442,
        executionTimeMillisEstimate: 15,
        opens: 16442,
        closes: 1,
        saveState: 17,
        restoreState: 17,
        isEOF: 1,
        limit: 1,
        inputStage: {
          stage: 'seek',
          planNodeId: 2,
          nReturned: 16442,
          executionTimeMillisEstimate: 15,
          opens: 16442,
          closes: 1,
          saveState: 17,
          restoreState: 17,
          isEOF: 0,
          numReads: 16442,
          recordSlot: 11,
          recordIdSlot: 12,
          seekKeySlot: 4,
          snapshotIdSlot: 7,
          indexIdentSlot: 8,
          indexKeySlot: 9,
          indexKeyPatternSlot: 10,
          fields: [],
          outputSlots: []
        }
      }
    }
  },
  command: { find: 'ratings', filter: { age: { '$gt': 80 } }, '$db': 'credit' },
  serverInfo: {
    host: 'AporvGoyal',
    port: 27017,
    version: '7.0.4',
    gitVersion: '38f3e37057a43d2e9f41a39142681a76062d582e'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeEngine'
  },
  ok: 1
}
credit> db.ratings.dropIndex({age: 1})
{ nIndexesWas: 2, ok: 1 }
credit> db.ratings.explain("executionStats").find({age: {$gt: 80}})
{
  explainVersion: '2',
  queryPlanner: {
    namespace: 'credit.ratings',
    indexFilterSet: false,
    parsedQuery: { age: { '$gt': 80 } },
    queryHash: 'B0DFDEAC',
    planCacheKey: '16A67B75',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      queryPlan: {
        stage: 'COLLSCAN',
        planNodeId: 1,
        filter: { age: { '$gt': 80 } },
        direction: 'forward'
      },
      slotBasedPlan: {
        slots: '$$RESULT=s5 env: { s3 = 1737706413564 (NOW), s2 = Nothing (SEARCH_META), s1 = TimeZoneDatabase(Antarctica/South_Pole...Asia/Sakhalin) (timeZoneDB), s7 = 80 }',
        stages: '[1] filter {traverseF(s4, lambda(l1.0) { ((l1.0 > s7) ?: false) }, false)} \n' +
          '[1] scan s5 s6 none none none none lowPriority [s4 = age] @"710fcb31-c9fd-406d-bb88-5b667de7a59a" true false '
      }
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 16442,
    executionTimeMillis: 113,
    totalKeysExamined: 0,
    totalDocsExamined: 164977,
    executionStages: {
      stage: 'filter',
      planNodeId: 1,
      nReturned: 16442,
      executionTimeMillisEstimate: 112,
      opens: 1,
      closes: 1,
      saveState: 164,
      restoreState: 164,
      isEOF: 1,
      numTested: 164977,
      filter: 'traverseF(s4, lambda(l1.0) { ((l1.0 > s7) ?: false) }, false) ',
      inputStage: {
        stage: 'scan',
        planNodeId: 1,
        nReturned: 164977,
        executionTimeMillisEstimate: 112,
        opens: 1,
        closes: 1,
        saveState: 164,
        restoreState: 164,
        isEOF: 1,
        numReads: 164977,
        recordSlot: 5,
        recordIdSlot: 6,
        fields: [ 'age' ],
        outputSlots: [ Long('4') ]
      }
    }
  },
  command: { find: 'ratings', filter: { age: { '$gt': 80 } }, '$db': 'credit' },
  serverInfo: {
    host: 'AporvGoyal',
    port: 27017,
    version: '7.0.4',
    gitVersion: '38f3e37057a43d2e9f41a39142681a76062d582e'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeEngine'
  },
  ok: 1
}
credit> db.ratings.getIndexes()
[ { v: 2, key: { _id: 1 }, name: '_id_' } ]
credit> db.ratings.createIndex({age: 1})
age_1
credit> db.ratings.dropIndex({age: 1})
{ nIndexesWas: 2, ok: 1 }
credit> db.ratings.createIndex({age: 1})

age_1
credit>

credit> db.ratings.dropIndex({age: 1})
{ nIndexesWas: 2, ok: 1 }
credit> db.ratings.createIndex({age: 1},{background: true})
age_1
credit>